@startuml


'https://plantuml.com/class-diagram

package commands {

    interface WhereCommand<T> {
       +where(condition: String): T
    }

    interface LimitCommand<T>{
        +limit(limit: Integer): T
    }

    interface OrderByCommand<T> {
        +orderBy(columns: String): T
        +orderBy((columns: String, order: Order): T
    }
    OrderByCommand -+ Order : <<has>>

    enum Order {
        ASC,
        DESC
    }
}

package select {
    class SelectQueryBuilder implements SelectQuery, FromQuery, LimitQuery, OrderByQuery, WhereQuery {
        -builder: StringBuilder {readOnly}
        -hasWhere: Boolean
        +SelectQueryBuilder(columns: String...)
        +from(table: String): FromQuery <<override>>
        +build(): String <<override>>
        +limit(limit: Integer): LimitQuery <<override>>
        +orderBy(column: String): OrderByQuery <<override>>
        +orderBy(column: String, order: Order): OrderByQuery <<override>>
        +where(condition: String): WhereQuery <<override>>
    }

    interface SelectQuery {
        +from(table: String): FromQuery
    }

    interface FromQuery extends SqlQuery
    FromQuery --|> WhereCommand : <<bind>>T::WhereCommand
    FromQuery --|> OrderByCommand : <<bind>>T::OrderByCommand
    FromQuery --|> LimitCommand : <<bind>>T::LimitCommand

    interface WhereQuery extends SqlQuery
    WhereQuery --|> WhereCommand : <<bind>>T::WhereQuery
    WhereQuery --|> OrderByCommand : <<bind>>T::OrderByQuery
    WhereQuery --|> LimitCommand : <<bind>>T::LimitQuery

    interface OrderByQuery extends SqlQuery
    OrderByQuery --|> LimitCommand : <<bind>>T::LimitQuery

    interface LimitQuery extends SqlQuery
    OrderByQuery --|> LimitCommand : <<bind>>T::String
    interface OrderByQuery
    interface SelectQuery {
        +from(table: String): FromQuery
    }

    class SelectQueryBuilder implements SelectQuery, FromQuery, LimitQuery, OrderByQuery, WhereQuery {
        -builder: StringBuilder{readOnly}
        -hasWhere: Boolean
        +SelectQueryBuilder(columns: String...)
        +from(table: String): FromQuery <<override>>
        +build(): String <<override>>
        +limit(limit: Integer): LimitQuery <<override>>
        +orderBy(column: String): OrderByQuery <<override>>
        +orderBy(column: String, order: Order): OrderByQuery <<override>>
        +where(condition: String): WhereQuery <<override>>
    }

    WhereQuery --|> WhereCommand : <<bind>>T::String
    WhereQuery --|> OrderByCommand : <<bind>>T::String
    WhereQuery --|> LimitCommand : <<bind>>T::String
    interface WhereQuery extends SqlQuery

}

interface SqlQuery {
    +build(): String
}

class SqlBuilder{
    {static}+select(columns: String...): SelectQuery
}


SqlBuilder ..> SelectQueryBuilder: <<creates>>



'Relation je suis pas sur'
WhereQuery --> SqlQuery
FromQuery --> SqlQuery
FromQuery --> WhereQuery
SelectQuery --> FromQuery

@enduml
